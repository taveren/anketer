#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PyQt6 Universal Binary
–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç PyQt6 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏
"""

import os
import sys
import subprocess
import shutil

def check_pyqt6_architecture():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É PyQt6"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É PyQt6...")
    
    pyqt6_path = "dist/SurveyApp.app/Contents/Frameworks/PyQt6"
    if not os.path.exists(pyqt6_path):
        print("‚ùå PyQt6 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    libs = ["QtWidgets.abi3.so", "QtCore.abi3.so", "QtGui.abi3.so"]
    
    for lib in libs:
        lib_path = os.path.join(pyqt6_path, lib)
        if os.path.exists(lib_path):
            result = subprocess.run(["file", lib_path], capture_output=True, text=True)
            print(f"üìÅ {lib}: {result.stdout.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, universal –ª–∏
            if "universal binary" not in result.stdout.lower():
                print(f"‚ùå {lib} –Ω–µ universal!")
                return False
        else:
            print(f"‚ùå {lib} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
    
    print("‚úÖ PyQt6 –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ universal!")
    return True

def reinstall_pyqt6_universal():
    """–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyQt6 –∫–∞–∫ universal"""
    print("üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyQt6 –∫–∞–∫ universal...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PyQt6
    subprocess.run(["/Library/Frameworks/Python.framework/Versions/3.12/bin/python3", "-m", "pip", "uninstall", "PyQt6", "-y"])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    try:
        result = subprocess.run([
            "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3", "-m", "pip", "install", "PyQt6"
        ], check=True, capture_output=True, text=True)
        print("‚úÖ PyQt6 –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyQt6: {e}")
        return False

def rebuild_with_universal_pyqt6():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å universal PyQt6"""
    print("üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    if os.path.exists("dist"):
        shutil.rmtree("dist")
    if os.path.exists("build"):
        shutil.rmtree("build")
    if os.path.exists("SurveyApp.spec"):
        os.remove("SurveyApp.spec")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏
    cmd = [
        "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3", "-m", "PyInstaller",
        "--onedir",
        "--windowed",
        "--name", "SurveyApp",
        "--icon", "favicon.icns",
        "--target-arch", "universal2",
        "survey_app_pyqt.py"
    ]
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False

def create_alternative_solution():
    """–°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏"""
    print("üîß –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
    
    # –°–æ–±–∏—Ä–∞–µ–º ARM64 –≤–µ—Ä—Å–∏—é
    print("üì± –°–æ–±–∏—Ä–∞–µ–º ARM64 –≤–µ—Ä—Å–∏—é...")
    cmd_arm64 = [
        "python3", "-m", "PyInstaller",
        "--onedir",
        "--windowed",
        "--name", "SurveyApp_ARM64",
        "--icon", "favicon.icns",
        "survey_app_pyqt.py"
    ]
    
    try:
        subprocess.run(cmd_arm64, check=True)
        print("‚úÖ ARM64 –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ ARM64: {e}")
        return False
    
    # –°–æ–±–∏—Ä–∞–µ–º Intel –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ Rosetta
    print("üíª –°–æ–±–∏—Ä–∞–µ–º Intel –≤–µ—Ä—Å–∏—é...")
    cmd_intel = [
        "arch", "-x86_64", "python3", "-m", "PyInstaller",
        "--onedir",
        "--windowed",
        "--name", "SurveyApp_Intel",
        "--icon", "favicon.icns",
        "survey_app_pyqt.py"
    ]
    
    try:
        subprocess.run(cmd_intel, check=True)
        print("‚úÖ Intel –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Intel: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print("üîó –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º ARM64 –∫–∞–∫ –æ—Å–Ω–æ–≤—É
    if os.path.exists("dist/SurveyApp.app"):
        shutil.rmtree("dist/SurveyApp.app")
    
    shutil.copytree("dist/SurveyApp_ARM64.app", "dist/SurveyApp.app")
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
    intel_exec = "dist/SurveyApp_Intel.app/Contents/MacOS/SurveyApp_Intel"
    arm64_exec = "dist/SurveyApp_ARM64.app/Contents/MacOS/SurveyApp_ARM64"
    universal_exec = "dist/SurveyApp.app/Contents/MacOS/SurveyApp"
    
    if os.path.exists(intel_exec) and os.path.exists(arm64_exec):
        try:
            subprocess.run([
                "lipo", "-create",
                "-arch", "x86_64", intel_exec,
                "-arch", "arm64", arm64_exec,
                "-output", universal_exec
            ], check=True)
            print("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω!")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞: {e}")
            return False
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    shutil.rmtree("dist/SurveyApp_ARM64.app", ignore_errors=True)
    shutil.rmtree("dist/SurveyApp_Intel.app", ignore_errors=True)
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PyQt6 Universal Binary")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not check_pyqt6_architecture():
        print("‚ùå PyQt6 –Ω–µ universal, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        
        # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyQt6
        if not reinstall_pyqt6_universal():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyQt6!")
            return
        
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not rebuild_with_universal_pyqt6():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not check_pyqt6_architecture():
            print("‚ùå PyQt6 –≤—Å–µ –µ—â–µ –Ω–µ universal, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
            if not create_alternative_solution():
                print("‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!")
                return
    
    print("‚úÖ PyQt6 Universal Binary –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
    print("üìÅ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: dist/SurveyApp.app")
    print("üí° –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Intel –∏ Apple Silicon!")

if __name__ == "__main__":
    main()


