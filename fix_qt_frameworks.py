#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ x86_64 –≤–µ—Ä—Å–∏–∏ Qt –±–∏–±–ª–∏–æ—Ç–µ–∫
"""

import os
import sys
import subprocess
import shutil
import glob

def find_qt_frameworks():
    """–ù–∞—Ö–æ–¥–∏–º Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("üîç –ò—â–µ–º Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ...")
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ Qt
    qt_paths = [
        "/usr/local/Cellar/qt6/lib",
        "/opt/homebrew/Cellar/qt6/lib", 
        "/Library/Frameworks/Qt6.framework",
        "/usr/local/lib",
        "/opt/homebrew/lib"
    ]
    
    qt_frameworks = {}
    
    for path in qt_paths:
        if os.path.exists(path):
            print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {path}")
            
            # –ò—â–µ–º QtWidgets.framework
            widgets_path = os.path.join(path, "QtWidgets.framework")
            if os.path.exists(widgets_path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω QtWidgets: {widgets_path}")
                qt_frameworks["QtWidgets"] = widgets_path
            
            # –ò—â–µ–º –¥—Ä—É–≥–∏–µ Qt —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
            for framework in ["QtCore", "QtGui", "QtDBus"]:
                framework_path = os.path.join(path, f"{framework}.framework")
                if os.path.exists(framework_path):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω {framework}: {framework_path}")
                    qt_frameworks[framework] = framework_path
    
    return qt_frameworks

def check_qt_architecture(framework_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Qt —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
    if not os.path.exists(framework_path):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–Ω–∞—Ä–Ω–∏–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    binary_path = os.path.join(framework_path, os.path.basename(framework_path).replace(".framework", ""))
    if os.path.exists(binary_path):
        result = subprocess.run(["file", binary_path], capture_output=True, text=True)
        return "universal binary" in result.stdout.lower() or "x86_64" in result.stdout
    
    return False

def copy_qt_frameworks(qt_frameworks, app_path):
    """–ö–æ–ø–∏—Ä—É–µ–º Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("üì¶ –ö–æ–ø–∏—Ä—É–µ–º Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    frameworks_path = os.path.join(app_path, "Contents", "Frameworks")
    
    if not os.path.exists(frameworks_path):
        os.makedirs(frameworks_path)
    
    for framework_name, framework_path in qt_frameworks.items():
        print(f"üìã –ö–æ–ø–∏—Ä—É–µ–º {framework_name}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        if not check_qt_architecture(framework_path):
            print(f"‚ö†Ô∏è {framework_name} –Ω–µ universal, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
        dest_path = os.path.join(frameworks_path, os.path.basename(framework_path))
        
        if os.path.exists(dest_path):
            shutil.rmtree(dest_path)
        
        shutil.copytree(framework_path, dest_path)
        print(f"‚úÖ {framework_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
    
    return True

def fix_rpath_in_app(app_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º rpath –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º rpath –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...")
    
    exec_path = os.path.join(app_path, "Contents", "MacOS", "SurveyApp")
    
    if not os.path.exists(exec_path):
        print("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º rpath –∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º
    frameworks_path = os.path.join(app_path, "Contents", "Frameworks")
    rpath = f"@executable_path/../Frameworks"
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rpath
        subprocess.run([
            "install_name_tool", "-add_rpath", rpath, exec_path
        ], check=True)
        print("‚úÖ rpath –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ Qt –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
        for root, dirs, files in os.walk(frameworks_path):
            for file in files:
                if file.endswith('.so') or file.endswith('.dylib'):
                    file_path = os.path.join(root, file)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    result = subprocess.run([
                        "otool", "-L", file_path
                    ], capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        for line in result.stdout.split('\n'):
                            if 'Qt' in line and '@rpath' not in line:
                                # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –Ω–∞ @rpath
                                old_path = line.strip().split(' ')[0]
                                new_path = f"@rpath/{os.path.basename(old_path)}"
                                
                                subprocess.run([
                                    "install_name_tool", "-change", old_path, new_path, file_path
                                ], check=False)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        
        print("‚úÖ rpath –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è rpath: {e}")
        return False

def create_qt_launcher():
    """–°–æ–∑–¥–∞–µ–º launcher —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ Qt"""
    print("üîß –°–æ–∑–¥–∞–µ–º Qt launcher...")
    
    app_path = "dist/SurveyApp.app"
    exec_path = os.path.join(app_path, "Contents", "MacOS", "SurveyApp")
    launcher_path = os.path.join(app_path, "Contents", "MacOS", "SurveyApp_Qt")
    
    launcher_content = """#!/bin/bash
# Qt Launcher –¥–ª—è SurveyApp
# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
APP_DIR="$(dirname "$0")"
EXECUTABLE="$APP_DIR/SurveyApp"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Qt
export QT_PLUGIN_PATH="$APP_DIR/../Frameworks"
export QML2_IMPORT_PATH="$APP_DIR/../Frameworks"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
ARCH=$(uname -m)
echo "üîç –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f "$EXECUTABLE" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $EXECUTABLE"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º SurveyApp —Å Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏..."
exec "$EXECUTABLE" "$@"
"""
    
    # –°–æ–∑–¥–∞–µ–º launcher
    with open(launcher_path, "w") as f:
        f.write(launcher_content)
    
    # –î–µ–ª–∞–µ–º launcher –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(launcher_path, 0o755)
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(exec_path):
        backup_path = f"{exec_path}_Original"
        shutil.move(exec_path, backup_path)
        shutil.move(launcher_path, exec_path)
        print("‚úÖ Qt launcher —Å–æ–∑–¥–∞–Ω!")
        return True
    else:
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –¥–ª—è SurveyApp")
    print("=" * 50)
    
    app_path = "dist/SurveyApp.app"
    
    if not os.path.exists(app_path):
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        print("üìã –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python build_fixed_universal.py")
        return
    
    # –ò—â–µ–º Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
    qt_frameworks = find_qt_frameworks()
    
    if not qt_frameworks:
        print("‚ùå Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Qt6: brew install qt6")
        return
    
    # –ö–æ–ø–∏—Ä—É–µ–º Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
    if not copy_qt_frameworks(qt_frameworks, app_path):
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º rpath
    if not fix_rpath_in_app(app_path):
        return
    
    # –°–æ–∑–¥–∞–µ–º Qt launcher
    if not create_qt_launcher():
        return
    
    print("\nüéâ Qt-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    print("üìÅ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: dist/SurveyApp.app")
    print("üí° –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Intel –∏ Apple Silicon!")

if __name__ == "__main__":
    main()


